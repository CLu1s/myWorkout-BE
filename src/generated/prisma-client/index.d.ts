// Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  athlete: (where?: AthleteWhereInput) => Promise<boolean>;
  excercise: (where?: ExcerciseWhereInput) => Promise<boolean>;
  link: (where?: LinkWhereInput) => Promise<boolean>;
  routine: (where?: RoutineWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  workout: (where?: WorkoutWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  athlete: (where: AthleteWhereUniqueInput) => AthletePromise;
  athletes: (
    args?: {
      where?: AthleteWhereInput;
      orderBy?: AthleteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Athlete>;
  athletesConnection: (
    args?: {
      where?: AthleteWhereInput;
      orderBy?: AthleteOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AthleteConnectionPromise;
  excercise: (where: ExcerciseWhereUniqueInput) => ExcercisePromise;
  excercises: (
    args?: {
      where?: ExcerciseWhereInput;
      orderBy?: ExcerciseOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Excercise>;
  excercisesConnection: (
    args?: {
      where?: ExcerciseWhereInput;
      orderBy?: ExcerciseOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ExcerciseConnectionPromise;
  link: (where: LinkWhereUniqueInput) => LinkPromise;
  links: (
    args?: {
      where?: LinkWhereInput;
      orderBy?: LinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Link>;
  linksConnection: (
    args?: {
      where?: LinkWhereInput;
      orderBy?: LinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LinkConnectionPromise;
  routine: (where: RoutineWhereUniqueInput) => RoutinePromise;
  routines: (
    args?: {
      where?: RoutineWhereInput;
      orderBy?: RoutineOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Routine>;
  routinesConnection: (
    args?: {
      where?: RoutineWhereInput;
      orderBy?: RoutineOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RoutineConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  workout: (where: WorkoutWhereUniqueInput) => WorkoutPromise;
  workouts: (
    args?: {
      where?: WorkoutWhereInput;
      orderBy?: WorkoutOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Workout>;
  workoutsConnection: (
    args?: {
      where?: WorkoutWhereInput;
      orderBy?: WorkoutOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => WorkoutConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAthlete: (data: AthleteCreateInput) => AthletePromise;
  updateAthlete: (
    args: { data: AthleteUpdateInput; where: AthleteWhereUniqueInput }
  ) => AthletePromise;
  updateManyAthletes: (
    args: { data: AthleteUpdateManyMutationInput; where?: AthleteWhereInput }
  ) => BatchPayloadPromise;
  upsertAthlete: (
    args: {
      where: AthleteWhereUniqueInput;
      create: AthleteCreateInput;
      update: AthleteUpdateInput;
    }
  ) => AthletePromise;
  deleteAthlete: (where: AthleteWhereUniqueInput) => AthletePromise;
  deleteManyAthletes: (where?: AthleteWhereInput) => BatchPayloadPromise;
  createExcercise: (data: ExcerciseCreateInput) => ExcercisePromise;
  updateExcercise: (
    args: { data: ExcerciseUpdateInput; where: ExcerciseWhereUniqueInput }
  ) => ExcercisePromise;
  updateManyExcercises: (
    args: {
      data: ExcerciseUpdateManyMutationInput;
      where?: ExcerciseWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertExcercise: (
    args: {
      where: ExcerciseWhereUniqueInput;
      create: ExcerciseCreateInput;
      update: ExcerciseUpdateInput;
    }
  ) => ExcercisePromise;
  deleteExcercise: (where: ExcerciseWhereUniqueInput) => ExcercisePromise;
  deleteManyExcercises: (where?: ExcerciseWhereInput) => BatchPayloadPromise;
  createLink: (data: LinkCreateInput) => LinkPromise;
  updateLink: (
    args: { data: LinkUpdateInput; where: LinkWhereUniqueInput }
  ) => LinkPromise;
  updateManyLinks: (
    args: { data: LinkUpdateManyMutationInput; where?: LinkWhereInput }
  ) => BatchPayloadPromise;
  upsertLink: (
    args: {
      where: LinkWhereUniqueInput;
      create: LinkCreateInput;
      update: LinkUpdateInput;
    }
  ) => LinkPromise;
  deleteLink: (where: LinkWhereUniqueInput) => LinkPromise;
  deleteManyLinks: (where?: LinkWhereInput) => BatchPayloadPromise;
  createRoutine: (data: RoutineCreateInput) => RoutinePromise;
  updateRoutine: (
    args: { data: RoutineUpdateInput; where: RoutineWhereUniqueInput }
  ) => RoutinePromise;
  updateManyRoutines: (
    args: { data: RoutineUpdateManyMutationInput; where?: RoutineWhereInput }
  ) => BatchPayloadPromise;
  upsertRoutine: (
    args: {
      where: RoutineWhereUniqueInput;
      create: RoutineCreateInput;
      update: RoutineUpdateInput;
    }
  ) => RoutinePromise;
  deleteRoutine: (where: RoutineWhereUniqueInput) => RoutinePromise;
  deleteManyRoutines: (where?: RoutineWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createWorkout: (data: WorkoutCreateInput) => WorkoutPromise;
  updateWorkout: (
    args: { data: WorkoutUpdateInput; where: WorkoutWhereUniqueInput }
  ) => WorkoutPromise;
  updateManyWorkouts: (
    args: { data: WorkoutUpdateManyMutationInput; where?: WorkoutWhereInput }
  ) => BatchPayloadPromise;
  upsertWorkout: (
    args: {
      where: WorkoutWhereUniqueInput;
      create: WorkoutCreateInput;
      update: WorkoutUpdateInput;
    }
  ) => WorkoutPromise;
  deleteWorkout: (where: WorkoutWhereUniqueInput) => WorkoutPromise;
  deleteManyWorkouts: (where?: WorkoutWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  athlete: (
    where?: AthleteSubscriptionWhereInput
  ) => AthleteSubscriptionPayloadSubscription;
  excercise: (
    where?: ExcerciseSubscriptionWhereInput
  ) => ExcerciseSubscriptionPayloadSubscription;
  link: (
    where?: LinkSubscriptionWhereInput
  ) => LinkSubscriptionPayloadSubscription;
  routine: (
    where?: RoutineSubscriptionWhereInput
  ) => RoutineSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  workout: (
    where?: WorkoutSubscriptionWhereInput
  ) => WorkoutSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type RoutineOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type WorkoutOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "weight_ASC"
  | "weight_DESC"
  | "serie_ASC"
  | "serie_DESC"
  | "maxSerie_ASC"
  | "maxSerie_DESC"
  | "reps_ASC"
  | "reps_DESC"
  | "tempo_ASC"
  | "tempo_DESC"
  | "resTime_ASC"
  | "resTime_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AthleteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ExcerciseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "bodyPart_ASC"
  | "bodyPart_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "description_ASC"
  | "description_DESC"
  | "url_ASC"
  | "url_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AthleteWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface RoutineWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  workouts_every?: WorkoutWhereInput;
  workouts_some?: WorkoutWhereInput;
  workouts_none?: WorkoutWhereInput;
  AND?: RoutineWhereInput[] | RoutineWhereInput;
  OR?: RoutineWhereInput[] | RoutineWhereInput;
  NOT?: RoutineWhereInput[] | RoutineWhereInput;
}

export interface WorkoutWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  excercise?: ExcerciseWhereInput;
  weight?: Int;
  weight_not?: Int;
  weight_in?: Int[] | Int;
  weight_not_in?: Int[] | Int;
  weight_lt?: Int;
  weight_lte?: Int;
  weight_gt?: Int;
  weight_gte?: Int;
  serie?: Int;
  serie_not?: Int;
  serie_in?: Int[] | Int;
  serie_not_in?: Int[] | Int;
  serie_lt?: Int;
  serie_lte?: Int;
  serie_gt?: Int;
  serie_gte?: Int;
  maxSerie?: Int;
  maxSerie_not?: Int;
  maxSerie_in?: Int[] | Int;
  maxSerie_not_in?: Int[] | Int;
  maxSerie_lt?: Int;
  maxSerie_lte?: Int;
  maxSerie_gt?: Int;
  maxSerie_gte?: Int;
  reps?: Int;
  reps_not?: Int;
  reps_in?: Int[] | Int;
  reps_not_in?: Int[] | Int;
  reps_lt?: Int;
  reps_lte?: Int;
  reps_gt?: Int;
  reps_gte?: Int;
  tempo?: String;
  tempo_not?: String;
  tempo_in?: String[] | String;
  tempo_not_in?: String[] | String;
  tempo_lt?: String;
  tempo_lte?: String;
  tempo_gt?: String;
  tempo_gte?: String;
  tempo_contains?: String;
  tempo_not_contains?: String;
  tempo_starts_with?: String;
  tempo_not_starts_with?: String;
  tempo_ends_with?: String;
  tempo_not_ends_with?: String;
  resTime?: Int;
  resTime_not?: Int;
  resTime_in?: Int[] | Int;
  resTime_not_in?: Int[] | Int;
  resTime_lt?: Int;
  resTime_lte?: Int;
  resTime_gt?: Int;
  resTime_gte?: Int;
  routine?: RoutineWhereInput;
  AND?: WorkoutWhereInput[] | WorkoutWhereInput;
  OR?: WorkoutWhereInput[] | WorkoutWhereInput;
  NOT?: WorkoutWhereInput[] | WorkoutWhereInput;
}

export interface ExcerciseWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  bodyPart?: String;
  bodyPart_not?: String;
  bodyPart_in?: String[] | String;
  bodyPart_not_in?: String[] | String;
  bodyPart_lt?: String;
  bodyPart_lte?: String;
  bodyPart_gt?: String;
  bodyPart_gte?: String;
  bodyPart_contains?: String;
  bodyPart_not_contains?: String;
  bodyPart_starts_with?: String;
  bodyPart_not_starts_with?: String;
  bodyPart_ends_with?: String;
  bodyPart_not_ends_with?: String;
  AND?: ExcerciseWhereInput[] | ExcerciseWhereInput;
  OR?: ExcerciseWhereInput[] | ExcerciseWhereInput;
  NOT?: ExcerciseWhereInput[] | ExcerciseWhereInput;
}

export interface AthleteWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  routines_every?: RoutineWhereInput;
  routines_some?: RoutineWhereInput;
  routines_none?: RoutineWhereInput;
  AND?: AthleteWhereInput[] | AthleteWhereInput;
  OR?: AthleteWhereInput[] | AthleteWhereInput;
  NOT?: AthleteWhereInput[] | AthleteWhereInput;
}

export type ExcerciseWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type LinkWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface LinkWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  postedBy?: UserWhereInput;
  AND?: LinkWhereInput[] | LinkWhereInput;
  OR?: LinkWhereInput[] | LinkWhereInput;
  NOT?: LinkWhereInput[] | LinkWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  links_every?: LinkWhereInput;
  links_some?: LinkWhereInput;
  links_none?: LinkWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type RoutineWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export type WorkoutWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface AthleteCreateInput {
  name: String;
  routines?: RoutineCreateManyInput;
}

export interface RoutineCreateManyInput {
  create?: RoutineCreateInput[] | RoutineCreateInput;
  connect?: RoutineWhereUniqueInput[] | RoutineWhereUniqueInput;
}

export interface RoutineCreateInput {
  name: String;
  description: String;
  workouts?: WorkoutCreateManyWithoutRoutineInput;
}

export interface WorkoutCreateManyWithoutRoutineInput {
  create?:
    | WorkoutCreateWithoutRoutineInput[]
    | WorkoutCreateWithoutRoutineInput;
  connect?: WorkoutWhereUniqueInput[] | WorkoutWhereUniqueInput;
}

export interface WorkoutCreateWithoutRoutineInput {
  excercise: ExcerciseCreateOneInput;
  weight: Int;
  serie: Int;
  maxSerie: Int;
  reps: Int;
  tempo?: String;
  resTime: Int;
}

export interface ExcerciseCreateOneInput {
  create?: ExcerciseCreateInput;
  connect?: ExcerciseWhereUniqueInput;
}

export interface ExcerciseCreateInput {
  name: String;
  bodyPart: String;
}

export interface AthleteUpdateInput {
  name?: String;
  routines?: RoutineUpdateManyInput;
}

export interface RoutineUpdateManyInput {
  create?: RoutineCreateInput[] | RoutineCreateInput;
  update?:
    | RoutineUpdateWithWhereUniqueNestedInput[]
    | RoutineUpdateWithWhereUniqueNestedInput;
  upsert?:
    | RoutineUpsertWithWhereUniqueNestedInput[]
    | RoutineUpsertWithWhereUniqueNestedInput;
  delete?: RoutineWhereUniqueInput[] | RoutineWhereUniqueInput;
  connect?: RoutineWhereUniqueInput[] | RoutineWhereUniqueInput;
  set?: RoutineWhereUniqueInput[] | RoutineWhereUniqueInput;
  disconnect?: RoutineWhereUniqueInput[] | RoutineWhereUniqueInput;
  deleteMany?: RoutineScalarWhereInput[] | RoutineScalarWhereInput;
  updateMany?:
    | RoutineUpdateManyWithWhereNestedInput[]
    | RoutineUpdateManyWithWhereNestedInput;
}

export interface RoutineUpdateWithWhereUniqueNestedInput {
  where: RoutineWhereUniqueInput;
  data: RoutineUpdateDataInput;
}

export interface RoutineUpdateDataInput {
  name?: String;
  description?: String;
  workouts?: WorkoutUpdateManyWithoutRoutineInput;
}

export interface WorkoutUpdateManyWithoutRoutineInput {
  create?:
    | WorkoutCreateWithoutRoutineInput[]
    | WorkoutCreateWithoutRoutineInput;
  delete?: WorkoutWhereUniqueInput[] | WorkoutWhereUniqueInput;
  connect?: WorkoutWhereUniqueInput[] | WorkoutWhereUniqueInput;
  set?: WorkoutWhereUniqueInput[] | WorkoutWhereUniqueInput;
  disconnect?: WorkoutWhereUniqueInput[] | WorkoutWhereUniqueInput;
  update?:
    | WorkoutUpdateWithWhereUniqueWithoutRoutineInput[]
    | WorkoutUpdateWithWhereUniqueWithoutRoutineInput;
  upsert?:
    | WorkoutUpsertWithWhereUniqueWithoutRoutineInput[]
    | WorkoutUpsertWithWhereUniqueWithoutRoutineInput;
  deleteMany?: WorkoutScalarWhereInput[] | WorkoutScalarWhereInput;
  updateMany?:
    | WorkoutUpdateManyWithWhereNestedInput[]
    | WorkoutUpdateManyWithWhereNestedInput;
}

export interface WorkoutUpdateWithWhereUniqueWithoutRoutineInput {
  where: WorkoutWhereUniqueInput;
  data: WorkoutUpdateWithoutRoutineDataInput;
}

export interface WorkoutUpdateWithoutRoutineDataInput {
  excercise?: ExcerciseUpdateOneRequiredInput;
  weight?: Int;
  serie?: Int;
  maxSerie?: Int;
  reps?: Int;
  tempo?: String;
  resTime?: Int;
}

export interface ExcerciseUpdateOneRequiredInput {
  create?: ExcerciseCreateInput;
  update?: ExcerciseUpdateDataInput;
  upsert?: ExcerciseUpsertNestedInput;
  connect?: ExcerciseWhereUniqueInput;
}

export interface ExcerciseUpdateDataInput {
  name?: String;
  bodyPart?: String;
}

export interface ExcerciseUpsertNestedInput {
  update: ExcerciseUpdateDataInput;
  create: ExcerciseCreateInput;
}

export interface WorkoutUpsertWithWhereUniqueWithoutRoutineInput {
  where: WorkoutWhereUniqueInput;
  update: WorkoutUpdateWithoutRoutineDataInput;
  create: WorkoutCreateWithoutRoutineInput;
}

export interface WorkoutScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  weight?: Int;
  weight_not?: Int;
  weight_in?: Int[] | Int;
  weight_not_in?: Int[] | Int;
  weight_lt?: Int;
  weight_lte?: Int;
  weight_gt?: Int;
  weight_gte?: Int;
  serie?: Int;
  serie_not?: Int;
  serie_in?: Int[] | Int;
  serie_not_in?: Int[] | Int;
  serie_lt?: Int;
  serie_lte?: Int;
  serie_gt?: Int;
  serie_gte?: Int;
  maxSerie?: Int;
  maxSerie_not?: Int;
  maxSerie_in?: Int[] | Int;
  maxSerie_not_in?: Int[] | Int;
  maxSerie_lt?: Int;
  maxSerie_lte?: Int;
  maxSerie_gt?: Int;
  maxSerie_gte?: Int;
  reps?: Int;
  reps_not?: Int;
  reps_in?: Int[] | Int;
  reps_not_in?: Int[] | Int;
  reps_lt?: Int;
  reps_lte?: Int;
  reps_gt?: Int;
  reps_gte?: Int;
  tempo?: String;
  tempo_not?: String;
  tempo_in?: String[] | String;
  tempo_not_in?: String[] | String;
  tempo_lt?: String;
  tempo_lte?: String;
  tempo_gt?: String;
  tempo_gte?: String;
  tempo_contains?: String;
  tempo_not_contains?: String;
  tempo_starts_with?: String;
  tempo_not_starts_with?: String;
  tempo_ends_with?: String;
  tempo_not_ends_with?: String;
  resTime?: Int;
  resTime_not?: Int;
  resTime_in?: Int[] | Int;
  resTime_not_in?: Int[] | Int;
  resTime_lt?: Int;
  resTime_lte?: Int;
  resTime_gt?: Int;
  resTime_gte?: Int;
  AND?: WorkoutScalarWhereInput[] | WorkoutScalarWhereInput;
  OR?: WorkoutScalarWhereInput[] | WorkoutScalarWhereInput;
  NOT?: WorkoutScalarWhereInput[] | WorkoutScalarWhereInput;
}

export interface WorkoutUpdateManyWithWhereNestedInput {
  where: WorkoutScalarWhereInput;
  data: WorkoutUpdateManyDataInput;
}

export interface WorkoutUpdateManyDataInput {
  weight?: Int;
  serie?: Int;
  maxSerie?: Int;
  reps?: Int;
  tempo?: String;
  resTime?: Int;
}

export interface RoutineUpsertWithWhereUniqueNestedInput {
  where: RoutineWhereUniqueInput;
  update: RoutineUpdateDataInput;
  create: RoutineCreateInput;
}

export interface RoutineScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  AND?: RoutineScalarWhereInput[] | RoutineScalarWhereInput;
  OR?: RoutineScalarWhereInput[] | RoutineScalarWhereInput;
  NOT?: RoutineScalarWhereInput[] | RoutineScalarWhereInput;
}

export interface RoutineUpdateManyWithWhereNestedInput {
  where: RoutineScalarWhereInput;
  data: RoutineUpdateManyDataInput;
}

export interface RoutineUpdateManyDataInput {
  name?: String;
  description?: String;
}

export interface AthleteUpdateManyMutationInput {
  name?: String;
}

export interface ExcerciseUpdateInput {
  name?: String;
  bodyPart?: String;
}

export interface ExcerciseUpdateManyMutationInput {
  name?: String;
  bodyPart?: String;
}

export interface LinkCreateInput {
  description: String;
  url: String;
  postedBy?: UserCreateOneWithoutLinksInput;
}

export interface UserCreateOneWithoutLinksInput {
  create?: UserCreateWithoutLinksInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutLinksInput {
  name: String;
  email: String;
  password: String;
}

export interface LinkUpdateInput {
  description?: String;
  url?: String;
  postedBy?: UserUpdateOneWithoutLinksInput;
}

export interface UserUpdateOneWithoutLinksInput {
  create?: UserCreateWithoutLinksInput;
  update?: UserUpdateWithoutLinksDataInput;
  upsert?: UserUpsertWithoutLinksInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutLinksDataInput {
  name?: String;
  email?: String;
  password?: String;
}

export interface UserUpsertWithoutLinksInput {
  update: UserUpdateWithoutLinksDataInput;
  create: UserCreateWithoutLinksInput;
}

export interface LinkUpdateManyMutationInput {
  description?: String;
  url?: String;
}

export interface RoutineUpdateInput {
  name?: String;
  description?: String;
  workouts?: WorkoutUpdateManyWithoutRoutineInput;
}

export interface RoutineUpdateManyMutationInput {
  name?: String;
  description?: String;
}

export interface UserCreateInput {
  name: String;
  email: String;
  password: String;
  links?: LinkCreateManyWithoutPostedByInput;
}

export interface LinkCreateManyWithoutPostedByInput {
  create?: LinkCreateWithoutPostedByInput[] | LinkCreateWithoutPostedByInput;
  connect?: LinkWhereUniqueInput[] | LinkWhereUniqueInput;
}

export interface LinkCreateWithoutPostedByInput {
  description: String;
  url: String;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  password?: String;
  links?: LinkUpdateManyWithoutPostedByInput;
}

export interface LinkUpdateManyWithoutPostedByInput {
  create?: LinkCreateWithoutPostedByInput[] | LinkCreateWithoutPostedByInput;
  delete?: LinkWhereUniqueInput[] | LinkWhereUniqueInput;
  connect?: LinkWhereUniqueInput[] | LinkWhereUniqueInput;
  set?: LinkWhereUniqueInput[] | LinkWhereUniqueInput;
  disconnect?: LinkWhereUniqueInput[] | LinkWhereUniqueInput;
  update?:
    | LinkUpdateWithWhereUniqueWithoutPostedByInput[]
    | LinkUpdateWithWhereUniqueWithoutPostedByInput;
  upsert?:
    | LinkUpsertWithWhereUniqueWithoutPostedByInput[]
    | LinkUpsertWithWhereUniqueWithoutPostedByInput;
  deleteMany?: LinkScalarWhereInput[] | LinkScalarWhereInput;
  updateMany?:
    | LinkUpdateManyWithWhereNestedInput[]
    | LinkUpdateManyWithWhereNestedInput;
}

export interface LinkUpdateWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput;
  data: LinkUpdateWithoutPostedByDataInput;
}

export interface LinkUpdateWithoutPostedByDataInput {
  description?: String;
  url?: String;
}

export interface LinkUpsertWithWhereUniqueWithoutPostedByInput {
  where: LinkWhereUniqueInput;
  update: LinkUpdateWithoutPostedByDataInput;
  create: LinkCreateWithoutPostedByInput;
}

export interface LinkScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: LinkScalarWhereInput[] | LinkScalarWhereInput;
  OR?: LinkScalarWhereInput[] | LinkScalarWhereInput;
  NOT?: LinkScalarWhereInput[] | LinkScalarWhereInput;
}

export interface LinkUpdateManyWithWhereNestedInput {
  where: LinkScalarWhereInput;
  data: LinkUpdateManyDataInput;
}

export interface LinkUpdateManyDataInput {
  description?: String;
  url?: String;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
  password?: String;
}

export interface WorkoutCreateInput {
  excercise: ExcerciseCreateOneInput;
  weight: Int;
  serie: Int;
  maxSerie: Int;
  reps: Int;
  tempo?: String;
  resTime: Int;
  routine: RoutineCreateOneWithoutWorkoutsInput;
}

export interface RoutineCreateOneWithoutWorkoutsInput {
  create?: RoutineCreateWithoutWorkoutsInput;
  connect?: RoutineWhereUniqueInput;
}

export interface RoutineCreateWithoutWorkoutsInput {
  name: String;
  description: String;
}

export interface WorkoutUpdateInput {
  excercise?: ExcerciseUpdateOneRequiredInput;
  weight?: Int;
  serie?: Int;
  maxSerie?: Int;
  reps?: Int;
  tempo?: String;
  resTime?: Int;
  routine?: RoutineUpdateOneRequiredWithoutWorkoutsInput;
}

export interface RoutineUpdateOneRequiredWithoutWorkoutsInput {
  create?: RoutineCreateWithoutWorkoutsInput;
  update?: RoutineUpdateWithoutWorkoutsDataInput;
  upsert?: RoutineUpsertWithoutWorkoutsInput;
  connect?: RoutineWhereUniqueInput;
}

export interface RoutineUpdateWithoutWorkoutsDataInput {
  name?: String;
  description?: String;
}

export interface RoutineUpsertWithoutWorkoutsInput {
  update: RoutineUpdateWithoutWorkoutsDataInput;
  create: RoutineCreateWithoutWorkoutsInput;
}

export interface WorkoutUpdateManyMutationInput {
  weight?: Int;
  serie?: Int;
  maxSerie?: Int;
  reps?: Int;
  tempo?: String;
  resTime?: Int;
}

export interface AthleteSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AthleteWhereInput;
  AND?: AthleteSubscriptionWhereInput[] | AthleteSubscriptionWhereInput;
  OR?: AthleteSubscriptionWhereInput[] | AthleteSubscriptionWhereInput;
  NOT?: AthleteSubscriptionWhereInput[] | AthleteSubscriptionWhereInput;
}

export interface ExcerciseSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ExcerciseWhereInput;
  AND?: ExcerciseSubscriptionWhereInput[] | ExcerciseSubscriptionWhereInput;
  OR?: ExcerciseSubscriptionWhereInput[] | ExcerciseSubscriptionWhereInput;
  NOT?: ExcerciseSubscriptionWhereInput[] | ExcerciseSubscriptionWhereInput;
}

export interface LinkSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LinkWhereInput;
  AND?: LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput;
  OR?: LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput;
  NOT?: LinkSubscriptionWhereInput[] | LinkSubscriptionWhereInput;
}

export interface RoutineSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RoutineWhereInput;
  AND?: RoutineSubscriptionWhereInput[] | RoutineSubscriptionWhereInput;
  OR?: RoutineSubscriptionWhereInput[] | RoutineSubscriptionWhereInput;
  NOT?: RoutineSubscriptionWhereInput[] | RoutineSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface WorkoutSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: WorkoutWhereInput;
  AND?: WorkoutSubscriptionWhereInput[] | WorkoutSubscriptionWhereInput;
  OR?: WorkoutSubscriptionWhereInput[] | WorkoutSubscriptionWhereInput;
  NOT?: WorkoutSubscriptionWhereInput[] | WorkoutSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Athlete {
  id: ID_Output;
  name: String;
}

export interface AthletePromise extends Promise<Athlete>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  routines: <T = FragmentableArray<Routine>>(
    args?: {
      where?: RoutineWhereInput;
      orderBy?: RoutineOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AthleteSubscription
  extends Promise<AsyncIterator<Athlete>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  routines: <T = Promise<AsyncIterator<RoutineSubscription>>>(
    args?: {
      where?: RoutineWhereInput;
      orderBy?: RoutineOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Routine {
  id: ID_Output;
  name: String;
  description: String;
}

export interface RoutinePromise extends Promise<Routine>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  workouts: <T = FragmentableArray<Workout>>(
    args?: {
      where?: WorkoutWhereInput;
      orderBy?: WorkoutOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface RoutineSubscription
  extends Promise<AsyncIterator<Routine>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  workouts: <T = Promise<AsyncIterator<WorkoutSubscription>>>(
    args?: {
      where?: WorkoutWhereInput;
      orderBy?: WorkoutOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Workout {
  id: ID_Output;
  weight: Int;
  serie: Int;
  maxSerie: Int;
  reps: Int;
  tempo?: String;
  resTime: Int;
}

export interface WorkoutPromise extends Promise<Workout>, Fragmentable {
  id: () => Promise<ID_Output>;
  excercise: <T = ExcercisePromise>() => T;
  weight: () => Promise<Int>;
  serie: () => Promise<Int>;
  maxSerie: () => Promise<Int>;
  reps: () => Promise<Int>;
  tempo: () => Promise<String>;
  resTime: () => Promise<Int>;
  routine: <T = RoutinePromise>() => T;
}

export interface WorkoutSubscription
  extends Promise<AsyncIterator<Workout>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  excercise: <T = ExcerciseSubscription>() => T;
  weight: () => Promise<AsyncIterator<Int>>;
  serie: () => Promise<AsyncIterator<Int>>;
  maxSerie: () => Promise<AsyncIterator<Int>>;
  reps: () => Promise<AsyncIterator<Int>>;
  tempo: () => Promise<AsyncIterator<String>>;
  resTime: () => Promise<AsyncIterator<Int>>;
  routine: <T = RoutineSubscription>() => T;
}

export interface Excercise {
  id: ID_Output;
  name: String;
  bodyPart: String;
}

export interface ExcercisePromise extends Promise<Excercise>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  bodyPart: () => Promise<String>;
}

export interface ExcerciseSubscription
  extends Promise<AsyncIterator<Excercise>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  bodyPart: () => Promise<AsyncIterator<String>>;
}

export interface AthleteConnection {
  pageInfo: PageInfo;
  edges: AthleteEdge[];
}

export interface AthleteConnectionPromise
  extends Promise<AthleteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AthleteEdge>>() => T;
  aggregate: <T = AggregateAthletePromise>() => T;
}

export interface AthleteConnectionSubscription
  extends Promise<AsyncIterator<AthleteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AthleteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAthleteSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AthleteEdge {
  node: Athlete;
  cursor: String;
}

export interface AthleteEdgePromise extends Promise<AthleteEdge>, Fragmentable {
  node: <T = AthletePromise>() => T;
  cursor: () => Promise<String>;
}

export interface AthleteEdgeSubscription
  extends Promise<AsyncIterator<AthleteEdge>>,
    Fragmentable {
  node: <T = AthleteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAthlete {
  count: Int;
}

export interface AggregateAthletePromise
  extends Promise<AggregateAthlete>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAthleteSubscription
  extends Promise<AsyncIterator<AggregateAthlete>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ExcerciseConnection {
  pageInfo: PageInfo;
  edges: ExcerciseEdge[];
}

export interface ExcerciseConnectionPromise
  extends Promise<ExcerciseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ExcerciseEdge>>() => T;
  aggregate: <T = AggregateExcercisePromise>() => T;
}

export interface ExcerciseConnectionSubscription
  extends Promise<AsyncIterator<ExcerciseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ExcerciseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateExcerciseSubscription>() => T;
}

export interface ExcerciseEdge {
  node: Excercise;
  cursor: String;
}

export interface ExcerciseEdgePromise
  extends Promise<ExcerciseEdge>,
    Fragmentable {
  node: <T = ExcercisePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ExcerciseEdgeSubscription
  extends Promise<AsyncIterator<ExcerciseEdge>>,
    Fragmentable {
  node: <T = ExcerciseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateExcercise {
  count: Int;
}

export interface AggregateExcercisePromise
  extends Promise<AggregateExcercise>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateExcerciseSubscription
  extends Promise<AsyncIterator<AggregateExcercise>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Link {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  url: String;
}

export interface LinkPromise extends Promise<Link>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
  postedBy: <T = UserPromise>() => T;
}

export interface LinkSubscription
  extends Promise<AsyncIterator<Link>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  postedBy: <T = UserSubscription>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  links: <T = FragmentableArray<Link>>(
    args?: {
      where?: LinkWhereInput;
      orderBy?: LinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  links: <T = Promise<AsyncIterator<LinkSubscription>>>(
    args?: {
      where?: LinkWhereInput;
      orderBy?: LinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface LinkConnection {
  pageInfo: PageInfo;
  edges: LinkEdge[];
}

export interface LinkConnectionPromise
  extends Promise<LinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LinkEdge>>() => T;
  aggregate: <T = AggregateLinkPromise>() => T;
}

export interface LinkConnectionSubscription
  extends Promise<AsyncIterator<LinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LinkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLinkSubscription>() => T;
}

export interface LinkEdge {
  node: Link;
  cursor: String;
}

export interface LinkEdgePromise extends Promise<LinkEdge>, Fragmentable {
  node: <T = LinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LinkEdgeSubscription
  extends Promise<AsyncIterator<LinkEdge>>,
    Fragmentable {
  node: <T = LinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLink {
  count: Int;
}

export interface AggregateLinkPromise
  extends Promise<AggregateLink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLinkSubscription
  extends Promise<AsyncIterator<AggregateLink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoutineConnection {
  pageInfo: PageInfo;
  edges: RoutineEdge[];
}

export interface RoutineConnectionPromise
  extends Promise<RoutineConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoutineEdge>>() => T;
  aggregate: <T = AggregateRoutinePromise>() => T;
}

export interface RoutineConnectionSubscription
  extends Promise<AsyncIterator<RoutineConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoutineEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoutineSubscription>() => T;
}

export interface RoutineEdge {
  node: Routine;
  cursor: String;
}

export interface RoutineEdgePromise extends Promise<RoutineEdge>, Fragmentable {
  node: <T = RoutinePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoutineEdgeSubscription
  extends Promise<AsyncIterator<RoutineEdge>>,
    Fragmentable {
  node: <T = RoutineSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRoutine {
  count: Int;
}

export interface AggregateRoutinePromise
  extends Promise<AggregateRoutine>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoutineSubscription
  extends Promise<AsyncIterator<AggregateRoutine>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WorkoutConnection {
  pageInfo: PageInfo;
  edges: WorkoutEdge[];
}

export interface WorkoutConnectionPromise
  extends Promise<WorkoutConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WorkoutEdge>>() => T;
  aggregate: <T = AggregateWorkoutPromise>() => T;
}

export interface WorkoutConnectionSubscription
  extends Promise<AsyncIterator<WorkoutConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WorkoutEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWorkoutSubscription>() => T;
}

export interface WorkoutEdge {
  node: Workout;
  cursor: String;
}

export interface WorkoutEdgePromise extends Promise<WorkoutEdge>, Fragmentable {
  node: <T = WorkoutPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WorkoutEdgeSubscription
  extends Promise<AsyncIterator<WorkoutEdge>>,
    Fragmentable {
  node: <T = WorkoutSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWorkout {
  count: Int;
}

export interface AggregateWorkoutPromise
  extends Promise<AggregateWorkout>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWorkoutSubscription
  extends Promise<AsyncIterator<AggregateWorkout>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AthleteSubscriptionPayload {
  mutation: MutationType;
  node: Athlete;
  updatedFields: String[];
  previousValues: AthletePreviousValues;
}

export interface AthleteSubscriptionPayloadPromise
  extends Promise<AthleteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AthletePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AthletePreviousValuesPromise>() => T;
}

export interface AthleteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AthleteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AthleteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AthletePreviousValuesSubscription>() => T;
}

export interface AthletePreviousValues {
  id: ID_Output;
  name: String;
}

export interface AthletePreviousValuesPromise
  extends Promise<AthletePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface AthletePreviousValuesSubscription
  extends Promise<AsyncIterator<AthletePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ExcerciseSubscriptionPayload {
  mutation: MutationType;
  node: Excercise;
  updatedFields: String[];
  previousValues: ExcercisePreviousValues;
}

export interface ExcerciseSubscriptionPayloadPromise
  extends Promise<ExcerciseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ExcercisePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ExcercisePreviousValuesPromise>() => T;
}

export interface ExcerciseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ExcerciseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ExcerciseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ExcercisePreviousValuesSubscription>() => T;
}

export interface ExcercisePreviousValues {
  id: ID_Output;
  name: String;
  bodyPart: String;
}

export interface ExcercisePreviousValuesPromise
  extends Promise<ExcercisePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  bodyPart: () => Promise<String>;
}

export interface ExcercisePreviousValuesSubscription
  extends Promise<AsyncIterator<ExcercisePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  bodyPart: () => Promise<AsyncIterator<String>>;
}

export interface LinkSubscriptionPayload {
  mutation: MutationType;
  node: Link;
  updatedFields: String[];
  previousValues: LinkPreviousValues;
}

export interface LinkSubscriptionPayloadPromise
  extends Promise<LinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LinkPreviousValuesPromise>() => T;
}

export interface LinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LinkPreviousValuesSubscription>() => T;
}

export interface LinkPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  url: String;
}

export interface LinkPreviousValuesPromise
  extends Promise<LinkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
}

export interface LinkPreviousValuesSubscription
  extends Promise<AsyncIterator<LinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface RoutineSubscriptionPayload {
  mutation: MutationType;
  node: Routine;
  updatedFields: String[];
  previousValues: RoutinePreviousValues;
}

export interface RoutineSubscriptionPayloadPromise
  extends Promise<RoutineSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RoutinePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RoutinePreviousValuesPromise>() => T;
}

export interface RoutineSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoutineSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoutineSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RoutinePreviousValuesSubscription>() => T;
}

export interface RoutinePreviousValues {
  id: ID_Output;
  name: String;
  description: String;
}

export interface RoutinePreviousValuesPromise
  extends Promise<RoutinePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface RoutinePreviousValuesSubscription
  extends Promise<AsyncIterator<RoutinePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface WorkoutSubscriptionPayload {
  mutation: MutationType;
  node: Workout;
  updatedFields: String[];
  previousValues: WorkoutPreviousValues;
}

export interface WorkoutSubscriptionPayloadPromise
  extends Promise<WorkoutSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WorkoutPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WorkoutPreviousValuesPromise>() => T;
}

export interface WorkoutSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WorkoutSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WorkoutSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WorkoutPreviousValuesSubscription>() => T;
}

export interface WorkoutPreviousValues {
  id: ID_Output;
  weight: Int;
  serie: Int;
  maxSerie: Int;
  reps: Int;
  tempo?: String;
  resTime: Int;
}

export interface WorkoutPreviousValuesPromise
  extends Promise<WorkoutPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  weight: () => Promise<Int>;
  serie: () => Promise<Int>;
  maxSerie: () => Promise<Int>;
  reps: () => Promise<Int>;
  tempo: () => Promise<String>;
  resTime: () => Promise<Int>;
}

export interface WorkoutPreviousValuesSubscription
  extends Promise<AsyncIterator<WorkoutPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  weight: () => Promise<AsyncIterator<Int>>;
  serie: () => Promise<AsyncIterator<Int>>;
  maxSerie: () => Promise<AsyncIterator<Int>>;
  reps: () => Promise<AsyncIterator<Int>>;
  tempo: () => Promise<AsyncIterator<String>>;
  resTime: () => Promise<AsyncIterator<Int>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Link",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Excercise",
    embedded: false
  },
  {
    name: "Routine",
    embedded: false
  },
  {
    name: "Workout",
    embedded: false
  },
  {
    name: "Athlete",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
